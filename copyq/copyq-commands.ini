[Commands]
1\Automatic=true
1\Icon=\xf03e
1\Input=image/png
1\Name=Move Images to Other Tab
1\Remove=true
1\Tab=&Images
10\Command=copyq: plugins.itemtags.untag()
10\Icon=\xf02b
10\InMenu=true
10\Input=application/x-copyq-tags
10\Name=Remove a Tag
11\Command=copyq: plugins.itemtags.clearTags()
11\Icon=\xf02b
11\InMenu=true
11\Input=application/x-copyq-tags
11\Name=Clear all tags
12\Command=copyq: toggle()
12\Icon=\xf022
12\IsGlobalShortcut=true
12\Name=Show/hide main window
2\Command="copyq:\nvar suffices = {\n  'image/svg': 'svg',\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/jpg': 'jpg',\n  'image/bmp': 'bmp',\n  'text/html': 'html',\n  'text/plain' : 'txt',\n}\nfunction hasSuffix(fileName)\n{\n  return /\\.[0-9a-zA-z]+$/.test(fileName);\n}\nfunction addSuffix(fileName, format)\n{\n  var suffix = suffices[format]\n  return suffix ? fileName + \".\" + suffix : fileName\n}\nfunction filterFormats(format)\n{\n  return /^[a-z]/.test(format) && !/^application\\/x/.test(format)\n}\nfunction itemFormats(row)\n{\n  return str(read('?', row))\n    .split('\\n')\n    .filter(filterFormats)\n}\nfunction formatPriority(format)\n{\n  var k = Object.keys(suffices);\n  var i = k.indexOf(format);\n  return i === -1 ? k.length : i\n}\nfunction reorderFormats(formats)\n{\n  formats.sort(function(lhs, rhs){\n    var i = formatPriority(lhs);\n    var j = formatPriority(rhs);\n    return i === j ? lhs.localeCompare(rhs) : i - j;\n  })\n}\nif (selectedtab()) tab(selectedtab())\nvar row = selectedtab() ? currentitem() : -1\nvar formats = itemFormats(row)\nreorderFormats(formats)\ncurrentpath(Dir().homePath()+\"/Pictures/\")\nvar defaultFileName = 'untitled'\nvar keyFormat = 'Format'\nvar keyFileName = 'File'\nvar defaultFormat = formats[0]\nvar result = dialog(\n  '.title', 'Save Item As...',\n  '.width', 250,\n  keyFormat, [defaultFormat].concat(formats),\n  keyFileName, File(defaultFileName)\n) || abort()\nvar fileName = result[keyFileName]\nvar format = result[keyFormat]\nif (!format || !fileName)\n  abort()\nif (!hasSuffix(fileName))\n  fileName = addSuffix(fileName, format)\nvar f = File(fileName)\nif (!f.open()) {\n  popup('Failed to open \"' + f.fileName() + '\"', f.errorString())\n  abort()\n}\nf.write(selectedtab() ? getitem(currentitem())[format] : clipboard(format))\npopup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
2\Icon=\xf0c7
2\InMenu=true
2\Name=Save As...
2\Shortcut=ctrl+s
3\Automatic=true
3\Command="copyq:\n// Imports raw commands code (starting with [Command] or [Commands])\n// or from a link ('https://github.com/**/copyq-commands/blob/**.ini').\nvar timeOutSeconds = 10\nvar rawDataUrlPrefix = 'https://raw.githubusercontent.com'\n\n// Don't run this when mouse selection changes.\nif ( dataFormats().indexOf(mimeClipboardMode) != -1 )\n  abort()\n\nfunction importCommandsFromUrl(url)\n{\n  var m = url.match(/^https?:\\/\\/github\\.com(\\/.*)\\/blob(\\/.*\\.ini)/)\n  if (!m)\n    return;\n\n  var rawDataUrl = rawDataUrlPrefix + m[1] + m[2]\n  var reply = networkGet(rawDataUrl)\n  var commandsData = str(reply.data)\n  if (reply.status != 200) {\n    throw 'Failed to fetch commands.'\n        + '\\nStatus code: ' + reply.status\n        + '\\nError: ' + reply.error\n  }\n  if ( !commandsData.match(/^\\[Commands?\\]/) )\n    return;\n\n  return importCommands(commandsData);\n}\n\nvar cmds = importCommandsFromUrl(str(input())) || importCommands(input())\n\nvar list = '<ul>'\nfor (var i in cmds) {\n  var cmd = cmds[i]\n  var cmdType =\n    cmd.automatic ? 'automatic' :\n    cmd.inMenu ? 'menu/shortcut' :\n    cmd.globalShortcuts ? 'global shortcut' : '<b>???</b>';\n  list += '<li>' + escapeHtml(cmds[i].name) + ' (' + cmdType + ')</li>'\n}\nlist += '</ul>'\n\nvar message = '<p><b>Import commands</b> from clipboard?</p>' + list\nnotification(\n  '.title', 'Commands Available',\n  '.message', message,\n  '.time', timeOutSeconds*1000,\n  '.icon', '\xf085',\n  '.id', 'CopyQ_commands_in_clipboard',\n  '.button', 'Cancel', '', '',\n  '.button', 'Import', 'copyq: addCommands( importCommands(input()) )', exportCommands(cmds)\n)"
3\Icon=\xf085
3\Input=text/plain
3\Match=^\\[Commands?\\]|https?://github\\.com/.*/copyq-commands/blob/.*\\.ini
3\Name=Notification for Copied Commands
4\Command="copyq:\nvar snippetsTabName = 'Snippets'\n// List snippets instead of search combo box?\nvar listSnippets = false\n\nfunction newVarRe(content) {\n  return new RegExp('\\\\${' + content + '}', 'g')\n}\n\nfunction getText(item, format) {\n  return str(item[format] || '')\n}\n\nfunction assignPlaceholder(snippet, placeholder, value) {\n  return snippet.replace(newVarRe(placeholder + ':?.*?'), value)\n}\n\nfunction fuzzyIndexOf(snippetNames, snippetName) {\n    var re = new RegExp(snippetName, 'i')\n    for (var i in snippetNames) {\n      if (snippetNames[i].match(re))\n        return i;\n    }\n    return -1\n}\n\nfunction loadSnippets(snippetNames, snippets)\n{\n  var tabs = tab()\n  for (var i in tabs) {\n    var tabName = tabs[i];\n    if (tabName != snippetsTabName && tabName.indexOf(snippetsTabName + '/') != 0)\n      continue;\n\n    tab(tabName)\n    var prefix = tabName.substring(snippetsTabName.length + 1)\n    if (prefix)\n      prefix += ': '\n    for (var j = 0; j < size(); ++j) {\n      var snippet = getitem(j)\n      var snippetName = getText(snippet, mimeItemNotes)\n          || getText(snippet, mimeText)\n          || getText(snippet, mimeHtml)\n      snippetNames.push(prefix + snippetName)\n      snippets.push(snippet)\n    }\n  }\n}\n\nfunction askForSnippet(snippetNames, snippets) {\n  var list = listSnippets ? '.list:' : ''\n  var snippet = dialog(\n    '.title', 'Select Snippet',\n    list + 'Snippet', snippetNames\n  ) || abort()\n\n  if (listSnippets)\n      return snippets[snippet]\n\n  var i = snippetNames.indexOf(snippet)\n  if (i != -1)\n    return snippets[i]\n\n  i = fuzzyIndexOf(snippetNames, snippet)\n  if (i != -1)\n    return snippets[i]\n\n  popup(\n    'Snippet Not Found',\n    'No matching snippet found for \"' + snippetName + '\"!'\n  )\n  abort()\n}\n\nfunction getPlaceholders(snippet) {\n  var placeholders = {}\n  var m\n  var reVar = newVarRe('([^:}]*):?(.*?)')\n  while ((m = reVar.exec(snippet)) !== null) {\n    if (!(m[1] in placeholders))\n      placeholders[m[1]] = m[2].replace('\\\\n', '\\n')\n  }\n\n  return placeholders\n}\n\nfunction assignPlaceholders(text, values) {\n  if (!(values instanceof Object)) {\n    text = assignPlaceholder(text, '.*?', values)\n  } else {\n    for (var name in values)\n      text = assignPlaceholder(text, name, values[name])\n  }\n\n  return text\n}\n\nfunction askToAssignPlaceholders(snippet, format, values) {\n  var text = getText(snippet, format)\n  var placeholders = getPlaceholders(text)\n\n  if (Object.keys(placeholders).length < 1)\n    return\n\n  if (values) {\n    snippet[format] = assignPlaceholders(text, values)\n    return values\n  }\n\n  var label = escapeHtml(text)\n    .replace(newVarRe('([^:}]*).*?'), '<b>$1</b>')\n\n  var dialogVars = [\n    '.title', 'Set Snippet Values',\n    '.label', label\n  ]\n\n  for (var name in placeholders) {\n    var values = placeholders[name].split(',')\n    dialogVars.push(name)\n    dialogVars.push((values.length == 1) ? values[0] : values)\n  }\n\n  var values = dialog.apply(this, dialogVars) || abort()\n  snippet[format] = assignPlaceholders(text, values)\n  return values\n}\n\nfunction pasteSnippet(mime, content) {\n  copy(mime, content)\n  copySelection(mime, content)\n  paste()\n}\n\nvar snippetNames = []\nvar snippets = []\nloadSnippets(snippetNames, snippets)\n\nvar snippet = askForSnippet(snippetNames, snippets)\n\nvalues = askToAssignPlaceholders(snippet, mimeText)\naskToAssignPlaceholders(snippet, mimeHtml, values)\n\npasteSnippet(mimeItems, pack(snippet))"
4\Icon=\xf1fb
4\IsGlobalShortcut=true
4\Name=Snippets
5\Command=copyq: plugins.itempinned.pin()
5\Icon=\xf08d
5\InMenu=true
5\Input=!OUTPUT
5\Name=Pin
5\Output=application/x-copyq-item-pinned
6\Command=copyq: plugins.itempinned.unpin()
6\Icon=\xf08d
6\InMenu=true
6\Input=application/x-copyq-item-pinned
6\Name=Unpin
7\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
7\Icon=\xf02b
7\InMenu=true
7\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
7\Name=Tag as \x201cImportant\x201d
8\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
8\Icon=\xf02b
8\InMenu=true
8\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
8\Name=Remove tag \x201cImportant\x201d
9\Command=copyq: plugins.itemtags.tag()
9\Icon=\xf02b
9\InMenu=true
9\Name=Add a Tag
size=12
